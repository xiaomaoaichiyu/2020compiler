global     @zzzz      _          100       
storearr   @zzzz      0          0         
storearr   @zzzz      1          4         
storearr   @zzzz      2          8         
storearr   @zzzz      3          12        
storearr   @zzzz      4          16        
storearr   @zzzz      5          20        
storearr   @zzzz      6          24        
storearr   @zzzz      7          28        
storearr   @zzzz      8          32        
storearr   @zzzz      9          36        
storearr   @zzzz      10         40        
storearr   @zzzz      11         44        
storearr   @zzzz      12         48        
storearr   @zzzz      13         52        
storearr   @zzzz      14         56        
storearr   @zzzz      15         60        
global     @xx        _          100       
storearr   @xx        0          0         
storearr   @xx        1          4         
storearr   @xx        2          8         
storearr   @xx        3          12        
storearr   @xx        4          16        
storearr   @xx        5          20        
storearr   @xx        6          24        
storearr   @xx        7          28        
storearr   @xx        8          32        
storearr   @xx        9          36        
storearr   @xx        10         40        
storearr   @xx        11         44        
storearr   @xx        12         48        
storearr   @xx        13         52        
storearr   @xx        14         56        
storearr   @xx        15         60        
global     @Ac        -2         1         
global     @am        10         1         
global     @z         _          100       
storearr   @z         0          0         
storearr   @z         197        4         
storearr   @z         198        8         
global     @B         _          1         
global     @alpha     42         1         
global     @a         122        1         

define     @test      void      
para       %a         int        0         
store      %a         -20       
ret                              void      

define     @compare   int       
para       %a         int        0         
para       %b         int        0         
load                  %0         %a        
sub        %1         104        %0        
store      @B         %1        
load                  %2         %a        
load                  %3         %b        
sgt        %4         %2         %3        
br         %if.else_0 %4         %if.then_0
label      %if.then_0
load                  %5         %a        
ret                   %5         int       
br                    %if.end_0            
label      %if.else_0
load                  %6         %b        
ret                   %6         int       
br                    %if.end_0            
label      %if.end_0 

define     @Factorial int       
para       %n         int        0         
load                  %0         %n        
eql        %1         %0         1         
br         %if.else_1 %1         %if.then_1
label      %if.then_1
ret                   1          int       
br                    %if.end_1            
label      %if.else_1
load                  %2         %n        
note                 func Factorial() begin
load                  %3         %n        
sub        %4         %3         1         
push       int        %4         1         
call       %5         @Factorial 1         
note                 func Factorial() end
mul        %6         %2         %5        
ret                   %6         int       
br                    %if.end_1            
label      %if.end_1 

define     @gets1     int       
para       %var1      int        0         
para       %var2      int        0         
alloc      %change1   _          1         
load                  %0         %var1     
load                  %1         %var2     
mul        %2         %0         %1        
store      %change1   %2        
load                  %3         %change1  
ret                   %3         int       

define     @gets2     int       
para       %var1      int        0         
para       %var2      int        0         
alloc      %change1   _          1         
load                  %0         %var1     
load                  %1         %var2     
div        %2         %0         %1        
store      %change1   %2        
load                  %3         %change1  
ret                   %3         int       

define     @change    int       
para       %Q         int        0         
alloc      %i         _          1         
alloc      %j         _          1         
loadarr    40         %0         @xx       
store      %i         %0        
store      %j         0         
label      %while.cond_0
load                  %1         %j        
load                  %2         %i        
sle        %3         %1         %2        
br         %while.end_0 %3         %while.body_0
label      %while.body_0
load                  %4         %Q        
loadarr    8          %5         @xx       
div        %6         10         %5        
sub        %7         %4         %6        
add        %8         %7         1         
store      %Q         %8        
load                  %9         %i        
sub        %10        %9         1         
store      %i         %10       
load                  %11        %j        
add        %12        %11        2         
store      %j         %12       
br                    %while.cond_0           
label      %while.end_0
load                  %13        %Q        
ret                   %13        int       

define     @main      int       
alloc      %sadf      100        1         
alloc      %ffff      10         1         
alloc      %Total     _          1         
alloc      %i         _          1         
alloc      %number1   _          1         
alloc      %number2   _          1         
alloc      %number3   _          1         
alloc      %result    _          100       
alloc      %j         _          1         
alloc      %k         _          1         
alloc      %b         _          1         
store      %Total     10        
note                 func getarray() begin
push       int*       @z         1         
call       %0         @getarray  1         
note                 func getarray() end
sub        %1         %0         3         
store      %i         %1        
loadarr    4          %2         @z        
store      %number1   %2        
loadarr    8          %3         @z        
store      %number2   %3        
store      %number3   102       
note                 func putint() begin
load                  %4         %Total    
div        %5         %4         2         
add        %6         %5         122       
sub        %7         %6         10        
push       int        %7         1         
call       void       @putint    1         
note                 func putint() end
store      %j         10        
load                  %9         %i        
sub        %10        %9         0         
store      %k         %10       
load                  %11        %i        
sub        %12        0          %11       
div        %13        %12        2         
load                  %14        %Total    
mul        %15        %14        42        
add        %16        %13        %15       
load                  %17        %number3  
sub        %18        %16        %17       
storearr   %result    %18        0         
note                 func putint() begin
loadarr    0          %19        %result   
push       int        %19        1         
call       void       @putint    1         
note                 func putint() end
note                 func putchar() begin
push       int        32         1         
call       %21        @putchar   1         
note                 func putchar() end
note                 func gets1() begin
push       int        -2         1         
push       int        10         2         
call       %22        @gets1     2         
note                 func gets1() end
note                 func gets2() begin
push       int        10         1         
push       int        -2         2         
call       %23        @gets2     2         
note                 func gets2() end
add        %24        %22        %23       
storearr   %result    %24        4         
note                 func putint() begin
loadarr    4          %25        %result   
push       int        %25        1         
call       void       @putint    1         
note                 func putint() end
note                 func putchar() begin
push       int        32         1         
call       %27        @putchar   1         
note                 func putchar() end
label      %while.cond_1
br         %while.end_1 1          %while.body_1
label      %while.body_1
load                  %28        %k        
add        %29        %28        1         
store      %k         %29       
note                 index count begin
load                  %30        %k        
mul        %31        %30        4         
add        %32        0          %31       
note                 index count end
note                 func change() begin
load                  %33        %k        
push       int        %33        1         
call       %34        @change    1         
note                 func change() end
storearr   %result    %34        %32       
note                 func change() begin
note                 index count begin
load                  %35        %k        
mul        %36        %35        4         
add        %37        0          %36       
note                 index count end
loadarr    %37        %38        %result   
sub        %39        0          %38       
push       int        %39        1         
call       %40        @change    1         
note                 func change() end
sle        %41        %40        -2        
br         %if.else_2 %if.then_2 %if.end_2 
label      %if.then_2
br                    %while.end_1           
br                    %if.end_2            
label      %if.end_2 
br                    %while.cond_1           
label      %while.end_1
note                 func printf() begin
push       string     "%d "      1         
load                  %42        %k        
push       int        %42        2         
call       void       @printf    2         
note                 func printf() end
note                 func printf() begin
push       string     "%d "      1         
loadarr    4          %44        %result   
push       int        %44        2         
call       void       @printf    2         
note                 func printf() end
note                 func printf() begin
push       string     "%d "      1         
loadarr    8          %46        %result   
push       int        %46        2         
call       void       @printf    2         
note                 func printf() end
label      %while.cond_2
load                  %48        %number3  
note                 func compare() begin
load                  %49        %number1  
push       int        %49        1         
load                  %50        %number2  
push       int        %50        2         
call       %51        @compare   2         
note                 func compare() end
neq        %52        %48        %51       
br         %while.end_2 %52        %while.body_2
label      %while.body_2
load                  %53        %number3  
sub        %54        %53        1         
store      %number3   %54       
load                  %55        %j        
sub        %56        %55        1         
store      %j         %56       
note                 index count begin
load                  %57        %j        
mul        %58        %57        4         
add        %59        0          %58       
note                 index count end
loadarr    %59        %60        %result   
load                  %61        %Total    
div        %62        %61        2         
load                  %63        %k        
add        %64        %62        %63       
sgt        %65        %60        %64       
br         %if.else_3 %if.then_3 %if.end_3 
label      %if.then_3
note                 index count begin
load                  %66        %j        
mul        %67        %66        4         
add        %68        0          %67       
note                 index count end
load                  %69        %Total    
div        %70        %69        2         
load                  %71        %k        
add        %72        %70        %71       
storearr   %result    %72        %68       
br                    %if.end_3            
label      %if.end_3 
br                    %while.cond_2           
label      %while.end_2
note                 func printf() begin
push       string     "%d "      1         
note                 func Factorial() begin
load                  %73        %j        
push       int        %73        1         
call       %74        @Factorial 1         
note                 func Factorial() end
push       int        %74        2         
call       void       @printf    2         
note                 func printf() end
note                 func Factorial() begin
load                  %76        @B        
push       int        %76        1         
call       %77        @Factorial 1         
note                 func Factorial() end
store      %b         %77       
label      %while.cond_3
loadarr    4          %78        @xx       
eql        %79        1          %78       
br         %while.end_3 %79        %while.body_3
label      %while.body_3
load                  %80        %b        
sgt        %81        %80        18        
br         %if.else_4 %81        %if.then_4
label      %if.then_4
load                  %82        %b        
sub        %83        %82        10        
store      %b         %83       
load                  %84        %i        
load                  %85        %Total    
add        %86        %84        %85       
store      %i         %86       
br                    %if.end_4            
label      %if.else_4
br                    %while.end_3           
br                    %if.end_4            
label      %if.end_4 
br                    %while.cond_3           
label      %while.end_3
note                 func printf() begin
push       string     "%d "      1         
load                  %87        %i        
push       int        %87        2         
call       void       @printf    2         
note                 func printf() end
note                 func printf() begin
push       string     "%d "      1         
note                 func Factorial() begin
load                  %89        @B        
push       int        %89        1         
call       %90        @Factorial 1         
note                 func Factorial() end
note                 func Factorial() begin
load                  %91        @B        
sub        %92        %91        1         
push       int        %92        1         
call       %93        @Factorial 1         
note                 func Factorial() end
rem        %94        %90        %93       
push       int        %94        2         
call       void       @printf    2         
note                 func printf() end
load                  %96        %i        
ret                   %96        int       

