global     @zzzz      _          100       
storearr   @zzzz      0          0         
storearr   @zzzz      1          4         
storearr   @zzzz      2          8         
storearr   @zzzz      3          12        
storearr   @zzzz      4          16        
storearr   @zzzz      5          20        
storearr   @zzzz      6          24        
storearr   @zzzz      7          28        
storearr   @zzzz      8          32        
storearr   @zzzz      9          36        
storearr   @zzzz      10         40        
storearr   @zzzz      11         44        
storearr   @zzzz      12         48        
storearr   @zzzz      13         52        
storearr   @zzzz      14         56        
storearr   @zzzz      15         60        
global     @xx        _          100       
storearr   @xx        0          0         
storearr   @xx        1          4         
storearr   @xx        2          8         
storearr   @xx        3          12        
storearr   @xx        4          16        
storearr   @xx        5          20        
storearr   @xx        6          24        
storearr   @xx        7          28        
storearr   @xx        8          32        
storearr   @xx        9          36        
storearr   @xx        10         40        
storearr   @xx        11         44        
storearr   @xx        12         48        
storearr   @xx        13         52        
storearr   @xx        14         56        
storearr   @xx        15         60        
global     @Ac        -2         1         
global     @am        10         1         
global     @z         _          100       
storearr   @z         0          0         
storearr   @z         197        4         
storearr   @z         198        8         
global     @B         _          1         
global     @alpha     42         1         
global     @a         122        1         

define     @test      void      
para       %a         int        0         
store      %a         -20       
ret                              void      

define     @compare   int       
para       %a         int        0         
para       %b         int        0         
load                  %0         %a        
sub        %1         104        %0        
store      @B         %1        
load                  %2         %a        
load                  %3         %b        
sgt        %4         %2         %3        
br         %if.else_0 %4         %if.then_0
label      %if.then_0
load                  %5         %a        
ret                   %5         int       
br                    %if.end_0            
label      %if.else_0
load                  %6         %b        
ret                   %6         int       
br                    %if.end_0            
label      %if.end_0 

define     @Factorial int       
para       %n         int        0         
load                  %0         %n        
eql        %1         %0         1         
br         %if.else_1 %1         %if.then_1
label      %if.then_1
ret                   1          int       
br                    %if.end_1            
label      %if.else_1
load                  %2         %n        
note                 func Factorial() begin
load                  %3         %n        
sub        %4         %3         1         
push       int        %4         1         
call       %5         @Factorial 1         
mov                  %5         %6        
note                 func Factorial() end
mul        %7         %2         %6        
ret                   %7         int       
br                    %if.end_1            
label      %if.end_1 

define     @gets1     int       
para       %var1      int        0         
para       %var2      int        0         
alloc      %change1   _          1         
load                  %0         %var1     
load                  %1         %var2     
mul        %2         %0         %1        
store      %change1   %2        
load                  %3         %change1  
ret                   %3         int       

define     @gets2     int       
para       %var1      int        0         
para       %var2      int        0         
alloc      %change1   _          1         
load                  %0         %var1     
load                  %1         %var2     
div        %2         %0         %1        
store      %change1   %2        
load                  %3         %change1  
ret                   %3         int       

define     @change    int       
para       %Q         int        0         
alloc      %i         _          1         
alloc      %j         _          1         
loadarr    40         %0         @xx       
store      %i         %0        
store      %j         0         
label      %while.cond_0
load                  %1         %j        
load                  %2         %i        
sle        %3         %1         %2        
br         %while.end_0 %3         %while.body_0
label      %while.body_0
load                  %4         %Q        
loadarr    8          %5         @xx       
div        %6         10         %5        
sub        %7         %4         %6        
add        %8         %7         1         
store      %Q         %8        
load                  %9         %i        
sub        %10        %9         1         
store      %i         %10       
load                  %11        %j        
add        %12        %11        2         
store      %j         %12       
br                    %while.cond_0           
label      %while.end_0
load                  %13        %Q        
ret                   %13        int       

define     @main      int       
alloc      %sadf      100        1         
alloc      %ffff      10         1         
alloc      %Total     _          1         
alloc      %i         _          1         
alloc      %number1   _          1         
alloc      %number2   _          1         
alloc      %number3   _          1         
alloc      %result    _          100       
alloc      %j         _          1         
alloc      %k         _          1         
alloc      %b         _          1         
store      %Total     10        
note                 func getarray() begin
push       int*       @z         1         
call       %0         @getarray  1         
mov                  %0         %1        
note                 func getarray() end
sub        %2         %1         3         
store      %i         %2        
loadarr    4          %3         @z        
store      %number1   %3        
loadarr    8          %4         @z        
store      %number2   %4        
store      %number3   102       
note                 func putint() begin
load                  %5         %Total    
div        %6         %5         2         
add        %7         %6         122       
sub        %8         %7         10        
push       int        %8         1         
call       void       @putint    1         
note                 func putint() end
store      %j         10        
load                  %11        %i        
sub        %12        %11        0         
store      %k         %12       
load                  %13        %i        
sub        %14        0          %13       
div        %15        %14        2         
load                  %16        %Total    
mul        %17        %16        42        
add        %18        %15        %17       
load                  %19        %number3  
sub        %20        %18        %19       
storearr   %result    %20        0         
note                 func putint() begin
loadarr    0          %21        %result   
push       int        %21        1         
call       void       @putint    1         
note                 func putint() end
note                 func putchar() begin
push       int        32         1         
call       void       @putchar   1         
note                 func putchar() end
note                 func gets1() begin
push       int        -2         1         
push       int        10         2         
call       %26        @gets1     2         
mov                  %26        %27       
note                 func gets1() end
note                 func gets2() begin
push       int        10         1         
push       int        -2         2         
call       %28        @gets2     2         
mov                  %28        %29       
note                 func gets2() end
add        %30        %27        %29       
storearr   %result    %30        4         
note                 func putint() begin
loadarr    4          %31        %result   
push       int        %31        1         
call       void       @putint    1         
note                 func putint() end
note                 func putchar() begin
push       int        32         1         
call       void       @putchar   1         
note                 func putchar() end
label      %while.cond_1
br         %while.end_1 1          %while.body_1
label      %while.body_1
load                  %36        %k        
add        %37        %36        1         
store      %k         %37       
note                 index count begin
load                  %38        %k        
mul        %39        %38        4         
add        %40        0          %39       
note                 index count end
note                 func change() begin
load                  %41        %k        
push       int        %41        1         
call       %42        @change    1         
mov                  %42        %43       
note                 func change() end
storearr   %result    %43        %40       
note                 func change() begin
note                 index count begin
load                  %44        %k        
mul        %45        %44        4         
add        %46        0          %45       
note                 index count end
loadarr    %46        %47        %result   
sub        %48        0          %47       
push       int        %48        1         
call       %49        @change    1         
mov                  %49        %50       
note                 func change() end
sle        %51        %50        -2        
br         %if.else_2 %if.then_2 %if.end_2 
label      %if.then_2
br                    %while.end_1           
br                    %if.end_2            
label      %if.end_2 
br                    %while.cond_1           
label      %while.end_1
note                 func printf() begin
push       string     "%d "      1         
load                  %52        %k        
push       int        %52        2         
call       void       @printf    2         
note                 func printf() end
note                 func printf() begin
push       string     "%d "      1         
loadarr    4          %55        %result   
push       int        %55        2         
call       void       @printf    2         
note                 func printf() end
note                 func printf() begin
push       string     "%d "      1         
loadarr    8          %58        %result   
push       int        %58        2         
call       void       @printf    2         
note                 func printf() end
label      %while.cond_2
load                  %61        %number3  
note                 func compare() begin
load                  %62        %number1  
push       int        %62        1         
load                  %63        %number2  
push       int        %63        2         
call       %64        @compare   2         
mov                  %64        %65       
note                 func compare() end
neq        %66        %61        %65       
br         %while.end_2 %66        %while.body_2
label      %while.body_2
load                  %67        %number3  
sub        %68        %67        1         
store      %number3   %68       
load                  %69        %j        
sub        %70        %69        1         
store      %j         %70       
note                 index count begin
load                  %71        %j        
mul        %72        %71        4         
add        %73        0          %72       
note                 index count end
loadarr    %73        %74        %result   
load                  %75        %Total    
div        %76        %75        2         
load                  %77        %k        
add        %78        %76        %77       
sgt        %79        %74        %78       
br         %if.else_3 %if.then_3 %if.end_3 
label      %if.then_3
note                 index count begin
load                  %80        %j        
mul        %81        %80        4         
add        %82        0          %81       
note                 index count end
load                  %83        %Total    
div        %84        %83        2         
load                  %85        %k        
add        %86        %84        %85       
storearr   %result    %86        %82       
br                    %if.end_3            
label      %if.end_3 
br                    %while.cond_2           
label      %while.end_2
note                 func printf() begin
push       string     "%d "      1         
note                 func Factorial() begin
load                  %87        %j        
push       int        %87        1         
call       %88        @Factorial 1         
mov                  %88        %89       
note                 func Factorial() end
push       int        %89        2         
call       void       @printf    2         
note                 func printf() end
note                 func Factorial() begin
load                  %92        @B        
push       int        %92        1         
call       %93        @Factorial 1         
mov                  %93        %94       
note                 func Factorial() end
store      %b         %94       
label      %while.cond_3
loadarr    4          %95        @xx       
eql        %96        1          %95       
br         %while.end_3 %96        %while.body_3
label      %while.body_3
load                  %97        %b        
sgt        %98        %97        18        
br         %if.else_4 %98        %if.then_4
label      %if.then_4
load                  %99        %b        
sub        %100       %99        10        
store      %b         %100      
load                  %101       %i        
load                  %102       %Total    
add        %103       %101       %102      
store      %i         %103      
br                    %if.end_4            
label      %if.else_4
br                    %while.end_3           
br                    %if.end_4            
label      %if.end_4 
br                    %while.cond_3           
label      %while.end_3
note                 func printf() begin
push       string     "%d "      1         
load                  %104       %i        
push       int        %104       2         
call       void       @printf    2         
note                 func printf() end
note                 func printf() begin
push       string     "%d "      1         
note                 func Factorial() begin
load                  %107       @B        
push       int        %107       1         
call       %108       @Factorial 1         
mov                  %108       %109      
note                 func Factorial() end
note                 func Factorial() begin
load                  %110       @B        
sub        %111       %110       1         
push       int        %111       1         
call       %112       @Factorial 1         
mov                  %112       %113      
note                 func Factorial() end
rem        %114       %109       %113      
push       int        %114       2         
call       void       @printf    2         
note                 func printf() end
load                  %117       %i        
ret                   %117       int       

